# -*- coding: utf-8 -*-
"""Predict Naive bayes

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1X4IIKq-j-dMtM-F0B8BBzojrtR8OpWUa

# **Stages of modeling :**
https://towardsdev.com/predict-using-na%C3%AFve-bayes-with-python-be03f6c9d9f8
"""

#importing the libraries
import numpy as np
import pandas as pd
from sklearn.naive_bayes import GaussianNB
from sklearn.model_selection import train_test_split
from sklearn import metrics

data = {'outlook'  : ['sunny', 'sunny', 'overcast','rainy','rainy','rainy','overcast','sunny','sunny','rainy','sunny','overcast','overcast','rainy'],
        'temp'     : ['hot','hot','hot','mild','cool','cool','cool','mild','cool','mild','mild','mild','hot','mild'],
        'humidity' : ['high','high','high','high','normal','normal','normal','high','normal','normal','normal','high','normal','high'],
        'windy'    : ['false','true','false','false','false','true','true','false','false','false','true','true','false','true'],
        'play'     : ['no','no','yes','yes','yes','no','yes','no','yes','yes','yes','yes','yes','no']}
df   = pd.DataFrame(data)
df

#convert data type object to category
df_c = df.astype('category')

#convert categori to numerik
df_c["outlook"]   = df_c["outlook"].cat.codes
df_c["temp"]      = df_c["temp"].cat.codes
df_c["humidity"]  = df_c["humidity"].cat.codes
df_c["windy"]     = df_c["windy"].cat.codes
df_c["play"]      = df_c["play"].cat.codes
df_c.head(14)

#splitting the label and features data
X = df_c.iloc[:,:4].values
Y = df_c.iloc[:, 4].values

Y = df_c.iloc[:, 4].values
Y

#splitting the dataset into the training set and test set
X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size = 0.2,random_state = 45)
print(X_train.shape, y_train.shape)

#create a Gaussian classifier
model = GaussianNB()

#train models with training data
model.fit(X_train,y_train)

#response prediction for test data
y_pred = model.predict(X_test)

# Model accuracy
print("Accuracy:",metrics.accuracy_score(y_test,y_pred))

#model prediction results
predicted = model.predict([[0,2,1,1]]) # 0:Overcast, 2:Mild, 1:Normal, 1.True
print("Predicted Value:", predicted)

"""Dari hasil output prediksi diatas didapatkan predicted value 1 [YES]  yang artinya pemain dapat bermain dengan akurasi 1.0 (100%)"""